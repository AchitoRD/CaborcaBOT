// index.js (Contenido FINAL Y OPTIMIZADO - Refactorizado para usar interactionHandler)

const {

Client,

GatewayIntentBits,

Collection,

Events,

EmbedBuilder, // Todav√≠a necesario si generateConfigPanelEmbedAndComponents est√° aqu√≠

ActionRowBuilder, // Todav√≠a necesario

ButtonBuilder, // Todav√≠a necesario

ButtonStyle, // Todav√≠a necesario

MessageFlags // <-- Importado para el warning de ephemeral y flags

} = require('discord.js');


const { token } = require('./config');

const commandHandler = require('./handlers/commandHandler');

const eventHandler = require('./handlers/eventHandler');

const buttonHandler = require('./handlers/buttonHandler'); // Para 'verify_'

const interactionHandler = require('./handlers/interactionHandler'); // <-- ¬°NUEVO!


// Bases de datos

const cedulaSequelize = require('./database/database');

require('./models/Cedula');


const economySequelize = require('./database/economyDatabase');

require('./models/UserEconomy');


const configSequelize = require('./database/configDatabase');

const Config = require('./models/Config');

const { initializeConfigs, getConfig, saveConfig, clearAllConfigs } = require('./utils/configManager');


const Verification = require('./models/Verification');

const ServerVote = require('./models/ServerVote'); // Aseg√∫rate de que ServerVote est√© importado


const { shop, serverBannerUrl, embedColor } = require('./config'); // Aseg√∫rate de que esto est√© importado


// --- DECLARACI√ìN DEL CLIENTE AL PRINCIPIO ---

const client = new Client({

intents: [

GatewayIntentBits.Guilds,

GatewayIntentBits.GuildMessages,

GatewayIntentBits.MessageContent,

GatewayIntentBits.GuildMembers,

GatewayIntentBits.GuildPresences,

GatewayIntentBits.GuildMessageReactions,

],

});


client.commands = new Collection();


// Carga los manejadores de comandos y eventos

commandHandler(client);

eventHandler(client);


// --- Manejo centralizado de TODAS las interacciones de Discord ---

client.on(Events.InteractionCreate, async interaction => {

// 1. Manejo de comandos de barra (Slash Commands)

if (interaction.isChatInputCommand()) {

const command = client.commands.get(interaction.commandName);


if (!command) {

console.error(`No se encontr√≥ un comando que coincida con ${interaction.commandName}.`);

return await interaction.reply({ content: 'Oops! No pude encontrar ese comando. ¬øEst√° bien escrito? ü§î', flags: MessageFlags.Ephemeral });

}


try {

// Deferir la respuesta para que el bot no muestre "La aplicaci√≥n no responde"

if (!interaction.deferred && !interaction.replied) {

await interaction.deferReply({ flags: MessageFlags.Ephemeral });

}

await command.execute(interaction);


} catch (error) {

console.error(`Error al ejecutar el comando ${interaction.commandName}:`, error);

if (!interaction.replied && !interaction.deferred) {

await interaction.reply({ content: 'Hubo un error al ejecutar este comando.', flags: MessageFlags.Ephemeral });

} else if (interaction.deferred) {

await interaction.editReply({ content: 'Hubo un error al ejecutar este comando.', flags: MessageFlags.Ephemeral });

} else if (interaction.replied) {

await interaction.followUp({ content: 'Hubo un error al ejecutar este comando.', flags: MessageFlags.Ephemeral });

}

}

}


// 2. Manejo de interacciones de componentes (botones, select menus) y modales

// ¬°Toda la l√≥gica de customId se mueve a interactionHandler.js!

else if (interaction.isButton() || interaction.isStringSelectMenu() || interaction.isModalSubmit()) {

// Pasa la interacci√≥n y el cliente al manejador de interacciones

await interactionHandler(interaction, client);

}

});


// --- Funci√≥n para generar el Embed y los componentes del panel de configuraci√≥n ---

// Mantenemos esta funci√≥n aqu√≠ porque el comando /configurar la usa

// y si config.js no est√° en el interactionHandler, ser√≠a un problema.

// Podr√≠as moverla a utils/ si la usas en muchos sitios, pero por ahora est√° bien.

async function generateConfigPanelEmbedAndComponents(client, user) {

const configEmbed = new EmbedBuilder()

.setColor(0x3498DB)

.setTitle('‚öôÔ∏è Panel de Configuraci√≥n de Caborca Bot')

.setDescription('Aqu√≠ puedes ajustar varias configuraciones de tu bot. Selecciona una opci√≥n para comenzar.')

.setThumbnail(client.user.displayAvatarURL())

.addFields(

{ name: 'Opciones Principales:', value: 'Usa los botones o el men√∫ para configurar:' },

{ name: 'üí∞ Econom√≠a', value: 'Configura roles y montos para comandos de econom√≠a como `/give`, `/collect`, `/work`.', inline: true },

{ name: 'üë• Roles de Usuario', value: 'Define roles para `No Verificado`, `Ciudadano`, y `Staff`.', inline: true },

{ name: 'üìù Canal de Logs', value: 'Establece el canal donde el bot enviar√° registros.', inline: true },

{ name: 'üëã Mensajes de Bienvenida', value: 'Configura mensajes autom√°ticos para nuevos miembros.', inline: true },

{ name: 'üéüÔ∏è Tickets', value: 'Define la categor√≠a para los canales de tickets.', inline: true },

{ name: '‚ú® Roles por Uso de √çtem', value: 'Configura qu√© roles pueden usar √≠tems de tu tienda.', inline: true },

{ name: 'üóëÔ∏è Vaciar Configuraci√≥n', value: 'Borra todas las configuraciones guardadas. ¬°√ösalo con precauci√≥n!', inline: true },

{ name: '‚ùå Cerrar Panel', value: 'Cierra esta ventana de configuraci√≥n.', inline: true },

)

.setTimestamp()

.setFooter({ text: `Solicitado por ${user.tag}`, iconURL: user.displayAvatarURL() });


const rowButtons1 = new ActionRowBuilder()

.addComponents(

new ButtonBuilder().setCustomId('config_economy_btn').setLabel('Econom√≠a').setStyle(ButtonStyle.Success),

new ButtonBuilder().setCustomId('config_user_roles_btn').setLabel('Roles de Usuario').setStyle(ButtonStyle.Primary),

new ButtonBuilder().setCustomId('config_logs_channel_btn').setLabel('Canal de Logs').setStyle(ButtonStyle.Primary),

);


const rowButtons2 = new ActionRowBuilder()

.addComponents(

new ButtonBuilder().setCustomId('config_welcome_messages_btn').setLabel('Bienvenida').setStyle(ButtonStyle.Primary),

new ButtonBuilder().setCustomId('config_ticket_channel_btn').setLabel('Tickets').setStyle(ButtonStyle.Primary),

new ButtonBuilder().setCustomId('config_use_item_roles_btn').setLabel('Roles de √çtems').setStyle(ButtonStyle.Primary),

);


const rowButtons3 = new ActionRowBuilder()

.addComponents(

new ButtonBuilder().setCustomId('config_clear_db_btn').setLabel('Vaciar Configuraci√≥n').setStyle(ButtonStyle.Danger),

new ButtonBuilder().setCustomId('config_exit_btn').setLabel('Cerrar Panel').setStyle(ButtonStyle.Secondary),

);


return {

embeds: [configEmbed],

components: [rowButtons1, rowButtons2, rowButtons3]

};

}



// Sincronizar las bases de datos y luego iniciar el bot

Promise.all([

cedulaSequelize.sync(),

economySequelize.sync(),

configSequelize.sync(),

ServerVote.sync()

])

.then(async () => {

console.log('‚úÖ Todas las bases de datos (C√©dulas, Econom√≠a, Configuraci√≥n, Votaciones) sincronizadas con √©xito.');

await initializeConfigs();

client.login(token)

.then(() => console.log('‚úÖ Caborca Bot est√° en l√≠nea y conectado a Discord. ¬°Listo para el rol! üåµ'))

.catch(err => {

console.error('‚ùå Error al conectar el bot a Discord:', err);

process.exit(1);

});

})

.catch(error => {

console.error('‚ùå Error al sincronizar una o m√°s bases de datos:', error);

process.exit(1);

});


module.exports = client; 