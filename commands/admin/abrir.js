const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags } = require('discord.js');
const { createCaborcaEmbed } = require('../../utils/embedBuilder');
const { serverBannerUrl, embedColor } = require('../../config'); // Importa serverBannerUrl y embedColor

const MIN_VOTES_TO_OPEN = 15; // N√∫mero de votos requeridos para abrir el servidor
const OPEN_SERVER_DURATION_MINUTES = 15; // Minutos que tienen los usuarios para entrar despu√©s de la apertura

module.exports = {
    data: new SlashCommandBuilder()
        .setName('abrir')
        .setDescription('Inicia una votaci√≥n para abrir el servidor.')
        // El permiso de administrador ya se verifica en index.js
        ,
    async execute(interaction) {
        // CORRECCI√ìN CLAVE: Deferir P√öBLICAMENTE para que todos vean la votaci√≥n.
        // index.js no diferir√° este comando, as√≠ que /abrir lo hace directamente.
        await interaction.deferReply({ ephemeral: false }); 
        
        // Verifica si ya hay una votaci√≥n activa globalmente en el bot
        if (interaction.client.activePolls.size > 0) {
            // Si ya hay una, informa al administrador ef√≠meramente.
            return await interaction.editReply({ // editReply porque ya diferimos
                content: '‚ùå Ya hay una votaci√≥n activa en curso. ¬°Espera a que termine o ci√©rrala!',
                ephemeral: true 
            });
        }

        // Construye el embed inicial para la votaci√≥n de apertura del servidor.
        const pollEmbed = createCaborcaEmbed({
            title: 'üó≥Ô∏è ¬°Votaci√≥n Iniciada para Abrir el Servidor!',
            description: `El administrador ${interaction.user.tag} ha iniciado una votaci√≥n para abrir el servidor.`,
            color: embedColor, // Usa el color del config.js
            imageUrl: serverBannerUrl, // Usa el banner del config.js
            fields: [
                { name: 'üåê C√≥digo del Servidor', value: '```CABORPLAY```', inline: false },
                { name: '‚úÖ Votos Actuales', value: `0/${MIN_VOTES_TO_OPEN}`, inline: true },
                { name: 'Estado', value: 'En votaci√≥n...', inline: true }
            ],
            footer: { text: '¬°Vota para abrir el servidor!' },
            timestamp: true
        });

        // Crea los botones para la votaci√≥n (S√ç y NO).
        const voteButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('open_vote_yes') // ID personalizado para el bot√≥n "Votar S√ç"
                    .setLabel('Votar S√ç')
                    .setStyle(ButtonStyle.Success) // Estilo de bot√≥n verde
                    .setEmoji('‚úÖ'), // Emoji Unicode para "s√≠"
                new ButtonBuilder()
                .setCustomId('open_vote_no') // ID personalizado para el bot√≥n "Votar NO"
                .setLabel('Votar NO')
                .setStyle(ButtonStyle.Danger) // Estilo de bot√≥n rojo
                .setEmoji('‚ùå'), // Emoji Unicode para "no"
            );

        // Env√≠a el mensaje de votaci√≥n al canal donde se ejecut√≥ el comando.
        // fetchReply: true es necesario para obtener el message.id del mensaje enviado.
        const sentMessage = await interaction.editReply({ // editReply porque ya diferimos p√∫blicamente
            embeds: [pollEmbed],
            components: [voteButtons],
            fetchReply: true 
        });

        // Almacena la informaci√≥n de la votaci√≥n activa en client.activePolls.
        // Esto permite que el manejador de botones acceda a los datos de la votaci√≥n.
        interaction.client.activePolls.set(sentMessage.id, {
            votes: 0,
            requiredVotes: MIN_VOTES_TO_OPEN,
            voters: new Map(), // CAMBIO: Usamos Map() para voto √∫nico con anulaci√≥n
            isActive: true,
            statusMessageId: sentMessage.id, // ID del mensaje de la votaci√≥n
            adminUser: interaction.user.tag, // Administrador que inici√≥ la votaci√≥n
            adminId: interaction.user.id,
            channelId: interaction.channelId, // ID del canal donde se inici√≥ la votaci√≥n (para futuros avisos)
            openServerTimer: null // Para el temporizador de los 15 minutos despu√©s de la apertura
        });
    },
};