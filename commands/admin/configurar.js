// commands/admin/configurar.js
const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { getConfig, saveConfig } = require('../../utils/configManager'); // Aseg√∫rate de que configManager tenga las funciones adecuadas

module.exports = {
    data: new SlashCommandBuilder()
        .setName('configurar')
        .setDescription('Abre el panel de configuraci√≥n del bot.')
        .setDefaultMemberPermissions(0), // Solo administradores pueden usarlo por defecto

    async execute(interaction) {
        // NO DEBE HABER DEFERENCIA AQU√ç. commandHandler.js la hace autom√°ticamente.

        // Verifica si el usuario tiene permisos de ADMINISTRADOR
        if (!interaction.member.permissions.has('ADMINISTRATOR')) {
            return await interaction.editReply({ content: '‚ùå No tienes permisos para usar este comando.' });
        }

        const configEmbed = new EmbedBuilder()
            .setColor(0x3498DB)
            .setTitle('‚öôÔ∏è Panel de Configuraci√≥n de Caborca Bot')
            .setDescription('Aqu√≠ puedes ajustar varias configuraciones de tu bot. Selecciona una opci√≥n para comenzar.')
            .setThumbnail(interaction.client.user.displayAvatarURL())
            .addFields(
                { name: 'Opciones Principales:', value: 'Usa los botones o el men√∫ para configurar:' },
                { name: 'üí∞ Econom√≠a', value: 'Configura roles y montos para comandos de econom√≠a como `/give`, `/collect`, `/work`.', inline: true },
                { name: 'üë• Roles de Usuario', value: 'Define roles para `No Verificado`, `Ciudadano`, y `Staff`.', inline: true },
                { name: 'üìù Canal de Logs', value: 'Establece el canal donde el bot enviar√° registros.', inline: true },
                { name: 'üëã Mensajes de Bienvenida', value: 'Configura mensajes autom√°ticos para nuevos miembros.', inline: true },
                { name: 'üéüÔ∏è Tickets', value: 'Define la categor√≠a para los canales de tickets.', inline: true },
                { name: '‚ú® Roles por Uso de √çtem', value: 'Configura qu√© roles pueden usar √≠tems de tu tienda.', inline: true },
                { name: 'üóëÔ∏è Vaciar Configuraci√≥n', value: 'Borra todas las configuraciones guardadas. ¬°√ösalo con precauci√≥n!', inline: true }, // ¬°NUEVO CAMPO!
                { name: '‚ùå Cerrar Panel', value: 'Cierra esta ventana de configuraci√≥n.', inline: true },
            )
            .setTimestamp()
            .setFooter({ text: `Solicitado por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

        const rowButtons1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('config_economy_btn').setLabel('Econom√≠a').setStyle(ButtonStyle.Success),
                new ButtonBuilder().setCustomId('config_user_roles_btn').setLabel('Roles de Usuario').setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('config_logs_channel_btn').setLabel('Canal de Logs').setStyle(ButtonStyle.Primary),
            );

        const rowButtons2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('config_welcome_messages_btn').setLabel('Bienvenida').setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('config_ticket_channel_btn').setLabel('Tickets').setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('config_use_item_roles_btn').setLabel('Roles de √çtems').setStyle(ButtonStyle.Primary),
            );

        const rowButtons3 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('config_clear_db_btn').setLabel('Vaciar Configuraci√≥n').setStyle(ButtonStyle.Danger), // ¬°NUEVO BOT√ìN!
                new ButtonBuilder().setCustomId('config_exit_btn').setLabel('Cerrar Panel').setStyle(ButtonStyle.Secondary), // Cambiado a Secondary para diferenciarlo
            );

        await interaction.editReply({
            embeds: [configEmbed],
            components: [rowButtons1, rowButtons2, rowButtons3]
        });
    },
};