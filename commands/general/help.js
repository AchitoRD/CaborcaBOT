// commands/sistema/help.js
const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, MessageFlags } = require('discord.js');
const { createCaborcaEmbed } = require('../../utils/embedBuilder');
const { serverBannerUrl } = require('../../config');

// Objeto de configuraci√≥n de categor√≠as con emojis y descripciones
// Las claves DEBEN coincidir con los NOMBRES DE TUS CARPETAS de comandos.
// Las claves aqu√≠ deben estar en el mismo formato que los nombres de las carpetas (ej. 'admin', 'economy').
// Si tus carpetas son en min√∫sculas, las claves aqu√≠ tambi√©n.
const categoryConfig = {
    'admin': {
        emoji: 'üëÆ‚Äç‚ôÇÔ∏è',
        displayName: 'Administraci√≥n',
        description: 'Comandos para gestionar el servidor y el bot.',
    },
    'economy': {
        emoji: 'üí∞',
        displayName: 'Econom√≠a',
        description: 'Comandos relacionados con la econom√≠a del servidor: balances, compras, trabajos, etc.',
    },
    'general': { // Carpeta 'general' para micedula, vercedula
        emoji: 'üìã',
        displayName: 'Generales',
        description: 'Comandos de utilidad general y registro de informaci√≥n, como la c√©dula.',
    },
    'sistema': { // Carpeta 'sistema' para /help, /status
        emoji: 'ü§ñ',
        displayName: 'Sistema',
        description: 'Comandos relacionados con el funcionamiento y la informaci√≥n del bot.',
    },
    'policia': { // Aseg√∫rate de tener una carpeta 'policia' si usas esta categor√≠a
        emoji: 'üöì',
        displayName: 'Polic√≠a',
        description: 'Comandos exclusivos para el rol de polic√≠a: arrestos, multas, etc.',
    },
    'roleplay': { // Aseg√∫rate de tener una carpeta 'roleplay' si usas esta categor√≠a
        emoji: 'üé≠',
        displayName: 'Roleplay',
        description: 'Comandos para interactuar y rolear dentro del servidor.',
    },
    'Sin Categor√≠a': { // Para comandos que no tienen una categor√≠a asignada
        emoji: '‚ùì',
        displayName: 'Otros Comandos',
        description: 'Comandos que no pertenecen a una categor√≠a espec√≠fica.',
    },
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('üìö Muestra la gu√≠a de comandos interactiva del bot.')
        .setDMPermission(false),

    async execute(interaction) {
        await interaction.editReply({
            content: 'Cargando gu√≠a de comandos...',
            fetchReply: true,
            ephemeral: false
        });

        const commands = interaction.client.commands;
        const categoriesInBot = new Set(); // Recopilar solo las categor√≠as que realmente existen en el bot

        for (const [name, command] of commands) {
            const category = command.category || 'Sin Categor√≠a';
            categoriesInBot.add(category);
        }

        const selectOptions = Array.from(categoriesInBot)
            .sort((a, b) => {
                // Ordenar alfab√©ticamente, pero 'sistema' y 'Sin Categor√≠a' al final
                if (a === 'sistema') return 1;
                if (b === 'sistema') return -1;
                if (a === 'Sin Categor√≠a') return 1;
                if (b === 'Sin Categor√≠a') return -1;
                return a.localeCompare(b);
            })
            .map(category => {
                // Obtiene la configuraci√≥n de la categor√≠a usando el nombre de la carpeta.
                // Si la carpeta no est√° en categoryConfig, usa 'Sin Categor√≠a'.
                const config = categoryConfig[category] || categoryConfig['Sin Categor√≠a']; 
                return new StringSelectMenuOptionBuilder()
                    .setLabel(`${config.emoji} ${config.displayName}`)
                    .setDescription(config.description)
                    .setValue(`help_category_${category}`); // El valor es simplemente el nombre de la carpeta (ej. 'admin')
            });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('help_category_select')
            .setPlaceholder('Elige una categor√≠a para ver sus comandos...');

        if (selectOptions.length > 0) {
            selectMenu.addOptions(selectOptions);
        } else {
            selectMenu.setPlaceholder('No hay categor√≠as de comandos disponibles.');
            selectMenu.setDisabled(true);
        }

        const actionRow = new ActionRowBuilder()
            .addComponents(selectMenu);

        const helpEmbed = createCaborcaEmbed({
            title: 'üìö **Gu√≠a Interactiva de Comandos de Caborca Bot**',
            description: '¬°Bienvenido a la ayuda! Aqu√≠ puedes explorar todos mis comandos organizados por categor√≠as. Simplemente selecciona una opci√≥n del men√∫ desplegable para ver los detalles.\n\n',
            imageUrl: serverBannerUrl,
            thumbnail: interaction.client.user.displayAvatarURL(),
            color: '#3498DB'
        });

        helpEmbed.setFooter({ text: `Para m√°s detalles sobre un comando, usa / y selecciona. | Solicitado por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
        helpEmbed.setTimestamp();

        await interaction.editReply({
            content: '',
            embeds: [helpEmbed],
            components: [actionRow]
        });
    },

    async handleSelectMenu(interaction) {
        await interaction.deferUpdate();

        // selectedCategoryValue ser√° el nombre de la carpeta tal cual (ej. 'admin', 'economy')
        const selectedCategoryValue = interaction.values[0].replace('help_category_', ''); 
        
        // Obtenemos la configuraci√≥n de la categor√≠a usando el nombre de la carpeta directamente
        const config = categoryConfig[selectedCategoryValue] || categoryConfig['Sin Categor√≠a'];

        const commands = interaction.client.commands;
        const cmdsInCategory = [];

        for (const [name, command] of commands) {
            const commandCategory = command.category || 'Sin Categor√≠a'; // Esto es lo que viene de commandHandler.js
            
            // La comparaci√≥n directa entre el nombre de la carpeta del comando y el valor seleccionado.
            if (commandCategory === selectedCategoryValue) { 
                cmdsInCategory.push(command);
            }
        }

        const sortedCmds = cmdsInCategory.sort((a, b) => a.data.name.localeCompare(b.data.name));

        const commandListContent = sortedCmds.length > 0
            ? sortedCmds.map(cmd => `\`/${cmd.data.name}\` - ${cmd.data.description}`).join('\n')
            : 'No se encontraron comandos en esta categor√≠a.';

        const categoryEmbed = createCaborcaEmbed({
            title: `${config.emoji} Comandos de la Categor√≠a: ${config.displayName}`,
            description: `Aqu√≠ tienes los comandos para **${config.description.toLowerCase()}**:\n\n${commandListContent}`,
            color: '#28B463'
        });

        categoryEmbed.setFooter({ text: `Para ver otra categor√≠a, usa el men√∫ desplegable. | Solicitado por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
        categoryEmbed.setTimestamp();

        await interaction.editReply({
            embeds: [categoryEmbed],
            components: interaction.message.components // Mantiene el men√∫ desplegable original
        });
    }
};