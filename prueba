

# Caborca Bot: Arquitectura y Estado Actual üöÄ

**Versi√≥n del Bot:** **1.0.1 (Estable)**

**Enlace al C√≥digo:** [https://github.com/AchitoRD/CaborcaBOT](https://github.com/AchitoRD/CaborcaBOT)

Caborca Bot est√° dise√±ado con una **arquitectura modular y robusta**, pensada para un mantenimiento sencillo, escalabilidad y una claridad impecable en el desarrollo. Su estructura se basa en un archivo central y carpetas especializadas que segmentan cada funci√≥n del bot.

---

## Estructura de Archivos y Carpetas üìÅ

* **`index.js`**: Es el cerebro de Caborca Bot. Este archivo principal inicia el cliente de Discord, carga todos los **manejadores (comandos, eventos, interacciones)** y sincroniza las bases de datos al arrancar. Es el punto de entrada central para todas las interacciones de Discord (comandos slash, botones, modales, select menus), redirigi√©ndolas a sus funciones espec√≠ficas.

    **¬°Funcionalidad Clave y √önica!** Una de las fortalezas de `index.js` es su **sistema autom√°tico de deferencia de interacciones (`deferReply`)**. Esto significa que *todos* los comandos de barra se responden autom√°ticamente con un estado "pensando" (ya sea visible o ef√≠mero) justo al ser llamados. Esto evita el temido mensaje "La aplicaci√≥n no responde" en Discord y simplifica la l√≥gica en cada comando individual, delegando la responsabilidad de la primera respuesta a un solo lugar. **Los comandos `/abrir` y `/cerrar` son excepciones gestionadas directamente aqu√≠ para asegurar su visibilidad p√∫blica.**

    Adem√°s, incluye la crucial **verificaci√≥n de roles para comandos restringidos** (como los de polic√≠a) y gestiona los **estados de presencia rotativos** del bot, ¬°con emojis din√°micos cada **5 segundos**!

* **`commands/`**: Aqu√≠ vive la l√≥gica de todos los comandos del bot, organizados de forma l√≥gica por categor√≠as para una gesti√≥n m√°s f√°cil:
    * **`commands/admin/`**: Contiene comandos esenciales de administraci√≥n, como el potente `/configurar` para gestionar los ajustes del bot directamente desde Discord. Incluye los comandos **`/abrir` y `/cerrar`** para la gesti√≥n p√∫blica de la apertura y cierre del servidor a trav√©s de un sistema de votaci√≥n. Aqu√≠ tambi√©n se encuentra el comando **`/pruebascomandos`**, una herramienta de diagn√≥stico exhaustiva que ejecuta y reporta el estado de todos los comandos de forma interna.
    * **`commands/economy/`**: Agrupa los comandos de nuestro sistema de econom√≠a (balance, tienda, etc.), incluyendo la l√≥gica para el comando `/pagarmulta` que ahora funciona mediante un men√∫ interactivo.
    * **`commands/roleplay/`**: Maneja todos los comandos relacionados con el roleplay, incluyendo el registro y la verificaci√≥n de c√©dulas.
    * **`commands/tickets/`**: Contiene la l√≥gica para la creaci√≥n y gesti√≥n eficiente de tickets de soporte.
    * **`commands/policia/`**: ¬°Aqu√≠ est√°n los **comandos recientemente implementados y mejorados para las fuerzas del orden**!
        * `/arresto`: Permite registrar arrestos con descripci√≥n, tiempo de c√°rcel, art√≠culos incautados y la posibilidad de a√±adir una foto como evidencia, todo presentado en un embed p√∫blico y muy bien formateado.
        * `/multa`: Impone multas con un valor espec√≠fico, placa o ID, art√≠culos incautados, y la opci√≥n de incluir una foto de evidencia, tambi√©n con un embed p√∫blico y detallado.
        * `/pagarmulta`: Facilita a los usuarios saldar sus multas pendientes de forma interactiva.
        * `/consultarantecedentes`: Una herramienta vital para los polic√≠as, que les permite consultar el historial completo de arrestos y multas de un usuario, mostrando detalles clave como tiempo, art√≠culos, placa y enlaces a la evidencia fotogr√°fica.

* **`events/`**: Centraliza la gesti√≥n de los eventos de Discord, como la bienvenida a nuevos miembros o las reacciones a mensajes.

* **`models/`**: Aqu√≠ se definen todos los modelos de la base de datos utilizando **Sequelize**. Esto nos permite interactuar con las tablas de forma orientada a objetos, asegurando una inicializaci√≥n correcta.
    * `Cedula.js`: Modelo para la gesti√≥n de c√©dulas de RP.
    * `UserEconomy.js`: Modelo para el balance de econom√≠a de los usuarios.
    * `Config.js`: Modelo para almacenar configuraciones din√°micas del bot.
    * `Verification.js`: Modelo para el seguimiento de solicitudes de verificaci√≥n.
    * `ServerVote.js`: Modelo para la gesti√≥n de votaciones en el servidor (aunque los comandos `/abrir` y `/cerrar` ahora operan con una l√≥gica interna basada en memoria en `client.activePolls`).
    * `Arresto.js`: ¬°Modelo actualizado para registrar detalles de arrestos, incluyendo `fotoUrl`, `tiempoMinutos` y `articulos`!
    * `Multa.js`: ¬°Modelo actualizado para registrar multas y su estado de pago, incluyendo `fotoUrl`, `placa` y `articulos`!

* **`handlers/`**: Controla la carga y ejecuci√≥n eficiente de los comandos y eventos, adem√°s de centralizar las interacciones:
    * **`commandHandler.js`**: Se encarga de cargar todos los comandos y registrarlos. **Ya no incluye la deferencia autom√°tica de interacciones**, delegando esta responsabilidad al `index.js` para asegurar la estabilidad y evitar conflictos.
    * **`eventHandler.js`**: Gestiona el registro de los distintos eventos del bot.
    * `buttonHandler.js`: Maneja interacciones espec√≠ficas de botones (ej. para verificaci√≥n).
    * **`interactionHandler.js`**: Un manejador centralizado crucial para todas las interacciones de componentes (botones, select menus, modales). Redirige cada interacci√≥n a la l√≥gica correspondiente, incluyendo las nuevas configuraciones del panel y las confirmaciones.
    * **`voteHandler.js`**: ¬°NUEVO! Maneja la l√≥gica espec√≠fica para las votaciones interactivas del comando `/abrir`, gestionando votos, actualizaciones de embed y temporizadores.

* **`utils/`**: Contiene funciones y utilidades generales reutilizables en todo el bot:
    * **`configManager.js`**: Gestiona la carga, guardado y limpieza de las configuraciones del bot desde la base de datos, ¬°incluyendo la nueva configuraci√≥n de `policeRoles`! Define valores por defecto y mantiene una cach√© para un acceso r√°pido.
    * **`embedBuilder.js`**: Funciones para construir embeds de Discord de manera consistente y atractiva.
    * **`responseUtils.js`**: Un conjunto de funciones auxiliares (`defer`, `reply`, `followUp`) que centralizan el manejo de respuestas a interacciones de Discord. Estas funciones son esenciales para asegurar una comunicaci√≥n fluida y sin errores, gestionando si una interacci√≥n ya ha sido diferida o respondida antes de intentar una nueva acci√≥n.
    * Tambi√©n incluye otras utilidades generales, como la gesti√≥n de cooldowns.

* **`database/`**: Contiene la configuraci√≥n y conexi√≥n a las bases de datos. Todos los modelos se definen al importar esta carpeta, pas√°ndoles la instancia de Sequelize adecuada.
    * `database.js` (`cedulaSequelize`): Conexi√≥n para la base de datos de c√©dulas.
    * `economyDatabase.js` (`economySequelize`): Conexi√≥n para la base de datos de econom√≠a, que ahora tambi√©n almacena los datos de arrestos y multas. (La gesti√≥n de votaciones de `/abrir` y `/cerrar` ahora utiliza `client.activePolls` en memoria).
    * `configDatabase.js` (`configSequelize`): Conexi√≥n para la base de datos de configuraci√≥n del bot.

* **`config.js`**: Almacena variables de entorno sensibles y configuraciones est√°ticas del bot (token, ID del cliente, ID del servidor, URL del banner, color de los embeds). Las configuraciones din√°micas, como los roles de polic√≠a, ahora se gestionan a trav√©s de `configManager.js` y la base de datos para mayor flexibilidad.

---

## Tecnolog√≠as y Dependencias Principales ‚öôÔ∏è

* **Node.js**: El entorno de ejecuci√≥n robusto que da vida a Caborca Bot.
* **discord.js**: Utilizamos las √∫ltimas versiones para una interacci√≥n fluida con la API de Discord y un manejo avanzado de eventos e interacciones (slash commands, botones, modales, select menus).
* **Sequelize**: Nuestro ORM de confianza para la conexi√≥n con bases de datos SQL (SQLite en este caso), garantizando la integridad y flexibilidad en los datos, adem√°s de una definici√≥n modular de los modelos.

---

## Funcionalidades Destacadas üéØ

* **Sistema de Econom√≠a Integral**: Balance, tienda, compra y uso de √≠tems, pagos autom√°ticos basados en roles.
* **Roleplay (RP) Avanzado**: Registro y verificaci√≥n de c√©dulas, ¬°ahora con un **sistema de fuerzas del orden completamente funcional** que incluye el registro detallado de arrestos y multas, con opciones de evidencia fotogr√°fica y tiempos asociados!
* **Sistema de Tickets Robusto**: Creaci√≥n, administraci√≥n y cierre de tickets para soporte o moderaci√≥n, facilitando la interacci√≥n con los usuarios.
* **Administraci√≥n Centralizada**: Comandos para configurar el bot (`/configurar` ahora con opci√≥n de configurar roles de polic√≠a directamente desde Discord), limpiar bases de datos y manejar permisos. Incluye el nuevo comando **`/pruebascomandos`** para diagn√≥stico completo del bot.
* **Gesti√≥n de Apertura/Cierre de Servidor**: Comandos **`/abrir`** y **`/cerrar`** con un sistema de votaci√≥n interactivo y p√∫blico, que permite a los administradores iniciar votaciones para abrir el servidor y controlar su estado.
* **Manejo de Interacciones Optimizado**: Implementaci√≥n correcta y eficiente de `deferReply` (gestionado centralmente en `index.js`), `replies`, modales y edici√≥n de mensajes para una **Experiencia de Usuario (UX) fluida y sin errores de interacci√≥n**, gracias a los helpers `responseUtils`.
* **Verificaci√≥n Autom√°tica de Miembros**: Cambio autom√°tico de apodos y asignaci√≥n de roles de staff en solicitudes de verificaci√≥n, agilizando el proceso.
* **Presencia Din√°mica**: Estados del bot rotativos y atractivos con emojis, actualiz√°ndose cada **5 segundos**.

---

## Estado Actual ‚úÖ

* El bot arranca correctamente sin errores cr√≠ticos, y **todas las bases de datos se sincronizan al inicio**, incluyendo las tablas de c√©dulas, econom√≠a, configuraci√≥n, arrestos y multas. (La tabla de votaciones de ServerVote.js ya no es cr√≠tica para `/abrir` y `/cerrar`, que ahora usan un sistema en memoria).
* Todas las funcionalidades claves, como econom√≠a, roleplay, tickets y verificaci√≥n, est√°n **implementadas y operativas**.
* Los comandos de polic√≠a (`/arresto`, `/multa`, `/pagarmulta` y `/consultarantecedentes`) han sido **implementados, probados y refinados** para su uso p√∫blico, con mensajes en embeds claros y bien formateados, y manejo adecuado de evidencia fotogr√°fica y detalles espec√≠ficos.
* La funcionalidad de `/configurar` ha sido **extendida para permitir la gesti√≥n de los roles de polic√≠a** directamente desde el propio panel del bot, ofreciendo un mayor control administrativo.
* Los nuevos comandos **`/abrir` y `/cerrar` est√°n completamente operativos**, permitiendo votaciones p√∫blicas para la apertura del servidor y su cierre, con la gesti√≥n de votos √∫nicos y avisos temporizados.
* La arquitectura modular y la **correcta implementaci√≥n centralizada de la deferencia de interacciones (`deferReply`) en `index.js`** aseguran que el bot sea robusto, f√°cil de mantener y escalar, eliminando problemas de respuestas duplicadas o invisibles y proporcionando una UX fluida.
* El bot ofrece una experiencia de usuario fluida y visualmente atractiva con sus embeds y estados din√°micos.

---