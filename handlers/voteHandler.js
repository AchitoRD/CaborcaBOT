const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags } = require('discord.js');
const { createCaborcaEmbed } = require('../utils/embedBuilder'); // Ajusta la ruta si es necesario

// Se redefinen las constantes para que voteHandler no dependa de config.js para su l√≥gica interna.
const MIN_VOTES_TO_OPEN = 15; 
const OPEN_SERVER_DURATION_MINUTES = 15; 

module.exports = {
    async handleVoteButton(interaction, client) {
        // Deferir la actualizaci√≥n del bot√≥n de forma ef√≠mera para evitar "La interacci√≥n fall√≥".
        await interaction.deferUpdate({ ephemeral: true });

        const { customId } = interaction;
        // Obtiene los datos de la votaci√≥n activa usando el ID del mensaje donde se presion√≥ el bot√≥n.
        const pollData = client.activePolls.get(interaction.message.id);

        // Verifica si la votaci√≥n existe y est√° activa.
        if (!pollData || !pollData.isActive) {
            return await interaction.followUp({ content: '‚ùå Esta votaci√≥n ya no est√° activa.', ephemeral: true });
        }

        // --- L√≥gica de Votaci√≥n (Voto √önico con Anulaci√≥n/Cambio) ---
        const userId = interaction.user.id;
        const userCurrentVote = pollData.voters.get(userId); // Obtener el voto actual del usuario

        if (customId === 'open_vote_yes') {
            if (userCurrentVote === 'yes') {
                return await interaction.followUp({ content: '‚ÑπÔ∏è Ya has votado S√ç en esta votaci√≥n.', ephemeral: true });
            }
            // Si el usuario hab√≠a votado 'no' previamente, el voto S√ç lo anula y lo suma.
            if (userCurrentVote === 'no') {
                // No hay contador de noVotes, as√≠ que solo actualizamos el voto a 'yes' y sumamos.
                // Si hubiera un contador de noVotes, se restar√≠a aqu√≠.
            } else {
                pollData.votes++; // Sumar voto S√ç si no hab√≠a votado antes.
            }
            pollData.voters.set(userId, 'yes'); // Registrar el voto como 'yes'
            await interaction.followUp({ content: `‚úÖ ¬°Voto S√ç registrado! Votos actuales: ${pollData.votes}/${pollData.requiredVotes}`, ephemeral: true });

        } else if (customId === 'open_vote_no') {
            if (userCurrentVote === 'no') {
                return await interaction.followUp({ content: '‚ÑπÔ∏è Ya has anulado tu voto (presionando NO) en esta votaci√≥n.', ephemeral: true });
            }
            // Si el usuario hab√≠a votado S√ç, anular su voto.
            if (userCurrentVote === 'yes') {
                pollData.votes--; // Restar voto S√ç
            }
            pollData.voters.set(userId, 'no'); // Registrar que anul√≥ su voto o vot√≥ 'no'
            await interaction.followUp({ content: `‚ùå ¬°Voto anulado! Votos actuales: ${pollData.votes}/${pollData.requiredVotes}`, ephemeral: true });
        }

        // --- Actualizaci√≥n del Embed de Votaci√≥n ---
        const originalEmbed = interaction.message.embeds[0];
        const updatedEmbed = EmbedBuilder.from(originalEmbed);

        // Actualizar el campo de votos (√≠ndice 1)
        if (originalEmbed.fields && originalEmbed.fields.length > 1) {
            updatedEmbed.spliceFields(1, 1, { // spliceFields(√≠ndice, cu√°ntos eliminar, nuevoCampo)
                name: '‚úÖ Votos Actuales', 
                value: `${pollData.votes}/${pollData.requiredVotes}`, 
                inline: true 
            });
        } else {
            // Esto deber√≠a no pasar si el embed inicial se crea correctamente.
            updatedEmbed.addFields({ name: '‚úÖ Votos Actuales', value: `${pollData.votes}/${pollData.requiredVotes}`, inline: true });
        }

        // --- L√≥gica de Apertura del Servidor al Alcanzar los Votos ---
        if (pollData.votes >= pollData.requiredVotes) {
            pollData.isActive = false; // Desactiva la votaci√≥n.
            updatedEmbed.setTitle('‚úÖ ¬°Servidor ABIERTO por Votaci√≥n!'); // Nuevo t√≠tulo.
            updatedEmbed.setDescription(`El administrador ${pollData.adminUser} inici√≥ una votaci√≥n para abrir el servidor, ¬°y se han alcanzado los votos necesarios!`);
            
            // Actualizar el campo de estado (√≠ndice 2)
            if (originalEmbed.fields && originalEmbed.fields.length > 2) {
                 updatedEmbed.spliceFields(2, 1, { 
                    name: 'Estado', 
                    value: 'Abierto', 
                    inline: true 
                });
            } else {
                // Esto deber√≠a no pasar si el embed inicial se crea correctamente.
                updatedEmbed.addFields({ name: 'Estado', value: 'Abierto', inline: true });
            }

            updatedEmbed.setColor(0x2ECC71); // Cambia el color del embed a verde.
            updatedEmbed.addFields({
                name: 'üì¢ ¬°Advertencia Importante!',
                value: `Tienes **${OPEN_SERVER_DURATION_MINUTES} minutos** para entrar al servidor con el c√≥digo \`CABORPLAY\` o podr√≠as ser sancionado por un administrador.`,
                inline: false
            });

            // Deshabilita los botones de votaci√≥n una vez que el servidor est√° abierto.
            const disabledButtons = interaction.message.components[0].components.map(btn => 
                ButtonBuilder.from(btn).setDisabled(true)
            );
            const row = new ActionRowBuilder().addComponents(disabledButtons);

            // Edita el mensaje original de votaci√≥n con el nuevo embed y los botones deshabilitados.
            await interaction.editReply({ embeds: [updatedEmbed], components: [row] });

            // --- Temporizador para Aviso de Sanci√≥n ---
            pollData.openServerTimer = setTimeout(async () => {
                const followUpEmbed = createCaborcaEmbed({
                    title: 'üö® ¬°Advertencia de Sanci√≥n por Inactividad!',
                    description: `Ha transcurrido el tiempo l√≠mite de **${OPEN_SERVER_DURATION_MINUTES} minutos** desde la apertura del servidor.
                    \nLos usuarios que a√∫n no hayan entrado al servidor con el c√≥digo \`CABORPLAY\` son susceptibles de ser sancionados por un administrador.`,
                    color: '#FF0000', // Color rojo para la advertencia.
                    footer: { text: 'Un administrador revisar√° la actividad.' },
                    timestamp: true
                });
                // Env√≠a el aviso de sanci√≥n al canal donde se inici√≥ la votaci√≥n.
                try {
                    const originalChannel = client.channels.cache.get(pollData.channelId); 
                    if (originalChannel) {
                        await originalChannel.send({ embeds: [followUpEmbed] });
                    }
                } catch (e) {
                    console.error('Error enviando aviso de sanci√≥n:', e);
                }
                // Elimina la votaci√≥n de la lista activa una vez que el temporizador finaliza.
                client.activePolls.delete(interaction.message.id); 
            }, OPEN_SERVER_DURATION_MINUTES * 60 * 1000); // Convierte minutos a milisegundos.

        } else {
            // Si los votos a√∫n no son suficientes, solo actualiza el conteo en el mensaje.
            const row = ActionRowBuilder.from(interaction.message.components[0]); // Mantiene los botones habilitados.
            await interaction.editReply({ embeds: [updatedEmbed], components: [row] });
        }
    },
};